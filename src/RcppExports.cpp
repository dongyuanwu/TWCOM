// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_Ck_strict
NumericVector get_Ck_strict(NumericMatrix expr, NumericMatrix spots, NumericVector ligand, NumericVector receptor);
RcppExport SEXP _TWCOM_get_Ck_strict(SEXP exprSEXP, SEXP spotsSEXP, SEXP ligandSEXP, SEXP receptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spots(spotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ligand(ligandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type receptor(receptorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ck_strict(expr, spots, ligand, receptor));
    return rcpp_result_gen;
END_RCPP
}
// get_Ck
NumericVector get_Ck(NumericMatrix expr, NumericMatrix spots, NumericVector ligand, NumericVector receptor);
RcppExport SEXP _TWCOM_get_Ck(SEXP exprSEXP, SEXP spotsSEXP, SEXP ligandSEXP, SEXP receptorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spots(spotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ligand(ligandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type receptor(receptorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ck(expr, spots, ligand, receptor));
    return rcpp_result_gen;
END_RCPP
}
// get_Ck_v
NumericVector get_Ck_v(NumericVector expr, NumericMatrix spots);
RcppExport SEXP _TWCOM_get_Ck_v(SEXP exprSEXP, SEXP spotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spots(spotsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ck_v(expr, spots));
    return rcpp_result_gen;
END_RCPP
}
// get_Ms
NumericMatrix get_Ms(NumericMatrix& M, NumericMatrix& spots);
RcppExport SEXP _TWCOM_get_Ms(SEXP MSEXP, SEXP spotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type spots(spotsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ms(M, spots));
    return rcpp_result_gen;
END_RCPP
}
// get_dist
NumericVector get_dist(NumericVector x, NumericVector y, NumericMatrix spots);
RcppExport SEXP _TWCOM_get_dist(SEXP xSEXP, SEXP ySEXP, SEXP spotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spots(spotsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dist(x, y, spots));
    return rcpp_result_gen;
END_RCPP
}
// if_neighbors
LogicalVector if_neighbors(NumericVector X, NumericVector Y, NumericVector sample, double dist);
RcppExport SEXP _TWCOM_if_neighbors(SEXP XSEXP, SEXP YSEXP, SEXP sampleSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< double >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(if_neighbors(X, Y, sample, dist));
    return rcpp_result_gen;
END_RCPP
}
// if_neighbors_samesample
LogicalVector if_neighbors_samesample(NumericVector X, NumericVector Y, double dist);
RcppExport SEXP _TWCOM_if_neighbors_samesample(SEXP XSEXP, SEXP YSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(if_neighbors_samesample(X, Y, dist));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TWCOM_get_Ck_strict", (DL_FUNC) &_TWCOM_get_Ck_strict, 4},
    {"_TWCOM_get_Ck", (DL_FUNC) &_TWCOM_get_Ck, 4},
    {"_TWCOM_get_Ck_v", (DL_FUNC) &_TWCOM_get_Ck_v, 2},
    {"_TWCOM_get_Ms", (DL_FUNC) &_TWCOM_get_Ms, 2},
    {"_TWCOM_get_dist", (DL_FUNC) &_TWCOM_get_dist, 3},
    {"_TWCOM_if_neighbors", (DL_FUNC) &_TWCOM_if_neighbors, 4},
    {"_TWCOM_if_neighbors_samesample", (DL_FUNC) &_TWCOM_if_neighbors_samesample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_TWCOM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
